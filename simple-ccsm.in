#!/usr/bin/env python
# -*-  coding: UTF-8 -*-

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, 
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Authors: Patrick Niklaus (marex@opencompositing.org)
# Copyright (C) 2007 Patrick Niklaus

import shutil
import os
import subprocess
import pygtk
import gtk
import gobject
import gtk.gdk as gdk
import gtk.glade as glade
import cairo
import compizconfig as ccs
import ccm
import locale
import gettext
from optparse import OptionParser
locale.setlocale(locale.LC_ALL, "")
_ = gettext.gettext

DataDir = '@prefix@/share/simple-ccsm/'
Profiles = [\
"Low Effects", "Easy to the eyes", "Medium Effects", "High Effects", "Hollywood got nothing"
]
# TODO Write descriptions
Descriptions = {\
'Low Effects': "",
'Easy to the eyes': "",
'Medium Effects': "",
'High Effects': "",
'Hollywood got nothing': ""
}

# Since there seems no way to get the untranslated names,
# we need to keep a list here.
CloseOpenEffectNames = [\
'None', 'Random', 'Airplane', 'Beam Up', 'Burn', 'Curved Fold',
'Domino', 'Dream', 'Explode', 'Fade', 'Fold', 'Glide 1', 'Glide 2',
'Horizontal Folds', 'Leaf Spread','Magic Lamp', 'Razr', 'Sidekick',
'Skewer', 'Vacuum', 'Wave', 'Zoom'
]

MinimizeEffectNames = [\
'None', 'Random', 'Airplane', 'Beam Up', 'Burn', 'Curved Fold',
'Domino', 'Dream', 'Explode', 'Fade', 'Fold', 'Glide 1', 'Glide 2',
'Horizontal Folds', 'Leaf Spread','Magic Lamp', 'Razr', 'Sidekick',
'Skewer', 'Zoom'

]

# 0 to 10 points
AnimationRatings = {\
'None': 0,
'Random': 5,
'Airplane': 10,
'Beam Up': 7,
'Burn': 8,
'Curved Fold': 4,
'Domino': 6,
'Dream': 6,
'Explode': 7,
'Fade': 3,
'Fold': 6,
'Glide 1': 6,
'Glide 2': 6,
'Horizontal Folds': 6,
'Leaf Spread': 8,
'Magic Lamp': 10,
'Razr': 8,
'Sidekick': 6,
'Skewer': 6,
'Vacuum': 8,
'Wave': 8,
'Zoom': 4
}

gtk.glade.bindtextdomain("simple-ccsm", "@prefix@/share/locale")
gettext.bindtextdomain("simple-ccsm", "@prefix@/share/locale")
gettext.textdomain("simple-ccsm")

# Possible are 74 points (cube and wall conflict)
EffectPluginRatings = {\
'wobbly': 10,
'cube': 3,
'wall': 2,
'expo': 5,
'blur': 8,
'mblur': 10,
'3d': 8,
'water': 10,
'firepaint': 7,
'shift': 5,
'cubereflex': 8
}

Pages = {
'profile': 0,
'animations': 1,
'desktop': 2,
'accessibility': 3
}

# Possible are 2 Points
AccessibilityPlugins = {\
'zoom': 1,
'ezoom': 1,
'colorfilter': 1
}

class DesktopPreview(gtk.Widget):
    def __init__(self, size=(0,0)):
        gtk.Widget.__init__(self)

        self.size = size
        self.desktop_height = 30
        self.desktop_width = 40
        self.desktop_space = 5
        self.line_width = 1.0

        self.set_flags(self.flags() | gtk.NO_WINDOW)

    def set_value(self, size):
        self.size = size
        self.queue_resize()

    def get_value(self):
        return self.size
    
    def do_unrealize(self):
        self.window.destroy()

    def do_size_allocate(self, allocation):
        self.allocation = allocation

        width = self.allocation.width
        height = self.allocation.height
        self.desktop_width = (width / self.size[0]) - self.desktop_space
        self.desktop_height = (self.desktop_width * 3.0) / 4.0
        factor = ((height / self.size[1]) - self.desktop_space) / self.desktop_height
        #factor = height / ((self.desktop_height + self.desktop_space) * self.size[1])

        if factor < 1.0:
            self.desktop_width = int(int(self.desktop_width) * factor)
            self.desktop_height = int(int(self.desktop_height) * factor)
        
    def do_expose_event(self, event):
        cr = self.window.cairo_create()
        
        fg = self.style.bg[gtk.STATE_SELECTED]
        dark = self.style.fg[gtk.STATE_NORMAL]

        x = self.allocation.x + self.line_width / 2.0
        y = self.allocation.y + self.line_width / 2.0
        for i in range(self.size[1]):
            for j in range(self.size[0]):
                cr.set_source_rgb(fg.red/65535.0,
                              fg.green/65535.0,
                              fg.blue/65535.0)

                cr.rectangle(x, y, self.desktop_width, self.desktop_height)
                cr.fill_preserve()
                
                cr.set_line_width(self.line_width)
                cr.set_source_rgb(dark.red/65535.0,
                              dark.green/65535.0,
                              dark.blue/65535.0)
                cr.stroke()

                x += self.desktop_width + self.desktop_space

            y += self.desktop_height + self.desktop_space 
            x = self.allocation.x + self.line_width / 2.0

class StarScale(gtk.Widget):
    def __init__(self, stars=0.0):
        gtk.Widget.__init__(self)

        self.stars = stars
        self.star_size = 16
        self.star_space = 5

        self.star_surface = cairo.ImageSurface.create_from_png("%s/images/star.png" % DataDir)
        
        self.set_flags(self.flags() | gtk.NO_WINDOW)

    def set_value(self, stars):
        self.stars = stars
        self.queue_resize()

    def get_value(self):
        return self.stars
    
    def do_size_request(self, req):
        req.height = self.star_size
        req.width = (self.star_size+self.star_space)*self.stars 

    def do_expose_event(self, event):
        cr = self.window.cairo_create()  

        x = self.allocation.x
        y = self.allocation.y
        i = self.stars
        while i > 0:
            size = 1.0
            if i < 1:
                size = i
            cr.set_source_surface(self.star_surface, x, y)
            cr.rectangle(x, y, self.star_size*size, self.star_size)
            cr.fill()
            x += self.star_size + self.star_space
            i -= 1


gobject.type_register(StarScale)
gobject.type_register(DesktopPreview)

class CheckImage(gtk.Image):
    def __init__(self, value=False):
        gtk.Image.__init__(self)

        self.value = value

        self.update_image()
    
    def set_value(self, value):
        self.value = value

        self.update_image()

    def get_value(self):
        return self.value
    
    def update_image(self):
        size = gtk.ICON_SIZE_BUTTON
        if self.value:
            self.set_from_stock(gtk.STOCK_APPLY, size)
        else:
            self.set_from_stock(gtk.STOCK_DIALOG_ERROR, size)

class MainWin:
    def __init__(self, context, page = -1):
        self.GladeXML = glade.XML(DataDir + "simple-ccsm.glade", domain="simple-ccsm")
		
        self.Context = context
        self.Block = 0

        if page != -1 and page in Pages:
            notebook = self.GladeXML.get_widget("notebook1")
            notebook.set_current_page (Pages[page])

        self.Window = self.GladeXML.get_widget("mainWin")
        self.Window.connect('destroy', self.Quit)
        theme = gtk.icon_theme_get_default()
        iconList = (\
            theme.load_icon("simple-ccsm", 16, 0),
            theme.load_icon("simple-ccsm", 32, 0),
            theme.load_icon("simple-ccsm", 48, 0),
        )
        self.Window.set_icon_list(*iconList)

        self.ProfileChooser = self.GladeXML.get_widget("profileChooser")
        applyButton = self.GladeXML.get_widget("applyButton")
        applyButton.connect('clicked', self.ApplyProfile)

        checkList = self.GladeXML.get_widget("checkList")
        self.EffectStars = StarScale()
        self.AnimationStars = StarScale()
        self.AccessibilityCheck = CheckImage()
        checkList.attach(self.AnimationStars, 1, 2, 1, 2, gtk.EXPAND, 0)
        checkList.attach(self.EffectStars, 1, 2, 2, 3, gtk.EXPAND, 0)
        checkList.attach(self.AccessibilityCheck, 1, 2, 4, 5, gtk.EXPAND, 0)

        closeButton = self.GladeXML.get_widget("closeButton")
        closeButton.connect('clicked', self.Quit)

        desktopTable = self.GladeXML.get_widget("desktopTable")
        self.DesktopPreview = DesktopPreview()
        desktopTable.attach(self.DesktopPreview, 1, 2, 3, 4, gtk.EXPAND | gtk.FILL, gtk.EXPAND | gtk.FILL)
        
        self.DesktopLayout = "<i>%s</i>"

        desktopBox = self.GladeXML.get_widget("desktopPluginChooser")
        desktopBox.connect('changed', self.AppearenceBoxChanged)

        desktopHSize = self.GladeXML.get_widget("horizontalDesktops")
        desktopHSize.connect('value-changed', self.DesktopSizeChanged, "hsize")
        desktopVSize = self.GladeXML.get_widget("verticalDesktops")
        desktopVSize.connect('value-changed', self.DesktopSizeChanged, "vsize")

        animationClose = self.GladeXML.get_widget("closeAnimationBox")
        animationClose.connect('changed', self.AnimationBoxChanged, "close_effects")
        animationOpen = self.GladeXML.get_widget("openAnimationBox")
        animationOpen.connect('changed', self.AnimationBoxChanged, "open_effects")
        animationMinimize = self.GladeXML.get_widget("minimizeAnimationBox")
        animationMinimize.connect('changed', self.AnimationBoxChanged, "minimize_effects")

        enableAnimations = self.GladeXML.get_widget("enableAnimations")
        enableAnimations.connect('toggled', self.EnableAnimationsChanged)

        switcherPluginBox = self.GladeXML.get_widget("switcherPluginChooser")
        switcherPluginBox.connect('changed', self.SwitcherBoxChanged)
        
        self.EnableZoom = self.GladeXML.get_widget("enableZoom")
        self.EnableZoom.connect('toggled', self.ZoomChanged)
        self.ZoomIn = None
        self.ZoomOut = None
        self.ZoomBox = self.GladeXML.get_widget("zoomBox")

        self.EnableScale = self.GladeXML.get_widget("enableScale")
        self.EnableScale.connect('toggled', self.EffectPluginChanged, "scale")

        self.EnableWobbly = self.GladeXML.get_widget("enableWobbly")
        self.EnableWobbly.connect('toggled', self.EffectPluginChanged, "wobbly")

        self.EnableBlur = self.GladeXML.get_widget("enableBlur")
        self.EnableBlur.connect('toggled', self.EffectPluginChanged, "blur")

        self.Update()        
        self.Window.show_all()

    def EnablePlugin(self, plugin, active):
        if self.Block > 0:
            return
        self.Block += 1
        # attempt to resolve conflicts...
        conflicts = plugin.Enabled and plugin.DisableConflicts or plugin.EnableConflicts
        conflict = ccm.PluginConflict(plugin, conflicts, autoResolve=True)
        if conflict.Resolve():
            plugin.Enabled = active
        else:
            return False
        self.Context.Write()
        self.Block = self.Block-1
        return True
    
    def SetupBoxModel(self, box):
        if not box.get_model():
            store = gtk.ListStore(gobject.TYPE_STRING)
            box.set_model(store)
            cell = gtk.CellRendererText()
            box.pack_start(cell, True)
            box.add_attribute(cell, 'text', 0)
        else:
            box.get_model().clear()

    def UpdateDesktopPlugins(self):
        self.DesktopPlugins = {}
        for plugin in self.Context.Plugins.values():
            if "largedesktop" in plugin.Features:
                self.DesktopPlugins[plugin.ShortDesc] = plugin

    def UpdateSwitcherPlugins(self):
        self.SwitcherPlugins = {}
        for pluginName in ('switcher', 'shift', 'ring'):
            if self.Context.Plugins.has_key(pluginName):
                plugin = self.Context.Plugins[pluginName]
                if pluginName == 'shift':
                    self.SwitcherPlugins[_("%s (Cover)") % plugin.ShortDesc] = plugin
                    self.SwitcherPlugins[_("%s (Flip)") % plugin.ShortDesc] = plugin
                else:
                    self.SwitcherPlugins[plugin.ShortDesc] = plugin
    
    def Update(self):
        self.Block += 1 

        self.Context.Read()
        
        self.SetProfile()
        self.SetEffectRating()
        self.SetEnableAnimations()
        self.FillAnimationBoxes()
        self.SetAnimationRating()
        self.UpdateSwitcherPlugins()
        self.FillSwitcherBox()
        self.SetEffectPlugins()
        self.UpdateDesktopPlugins()
        self.FillAppearenceBox()
        self.SetDesktopLabel()
        self.SetDesktopSize()
        self.SetDesktopPreview()
        self.CheckAccessibility()
        self.SetZoom()

        self.Block -= 1
    
    def ApplyProfile(self, widget):
        profile = self.ProfileChooser.get_active_text()
        
        if not profile in self.Context.Profiles.keys():
            profilePath = "%s/profiles/%s.profile" % (DataDir, profile)
            self.Context.CurrentProfile = ccs.Profile(self.Context, profile)
            self.Context.Read()
            self.Context.UpdateProfiles()
            self.Context.Import(profilePath) 
        else:
            if profile == _("Default"):
                self.Context.ResetProfile()
            else:
                self.Context.UpdateProfiles()
                self.Context.CurrentProfile = self.Context.Profiles[profile]
        
        self.Update()
        self.Context.Write()
    
    def SetProfile(self):
        self.SetupBoxModel(self.ProfileChooser)

        self.Context.UpdateProfiles()

        self.ProfileChooser.append_text(_("Default"))
        for profile in Profiles:
            self.ProfileChooser.append_text(profile)

        current = self.Context.CurrentProfile.Name or _("Default")
        if current in Profiles:
            pos = Profiles.index(current) + 1
            self.ProfileChooser.set_active(pos)
        elif current != _("Default"):
            self.ProfileChooser.prepend_text(current)
            self.ProfileChooser.set_active(0)
        else:
            self.ProfileChooser.set_active(0)

    def SetDesktopPreview(self):
        hsize = self.Context.Plugins['core'].Screens[0]["hsize"].Value
        vsize = self.Context.Plugins['core'].Screens[0]["vsize"].Value
        self.DesktopPreview.set_value((hsize, vsize))
    
    def DesktopSizeChanged(self, widget, settingName):
        if self.Block > 0:
            return
        value = widget.get_value()
        self.Context.Plugins['core'].Screens[0][settingName].Value = value
        self.Context.Write()
        self.SetDesktopPreview()
    
    def SetDesktopSize(self):
        scales = {"horizontalDesktops" : "hsize",
                  "verticalDesktops"   : "vsize"}

        for widgetName, settingName in scales.items():
            widget = self.GladeXML.get_widget(widgetName)
            setting = self.Context.Plugins['core'].Screens[0][settingName]
            widget.set_value(setting.Value)
    
    def SetDesktopLabel(self):
        label = self.GladeXML.get_widget("desktopLabel")
        for shortDesc, plugin in self.DesktopPlugins.items():
            if plugin.Enabled:
                label.set_markup(self.DesktopLayout % shortDesc)
                break
    
    def AppearenceBoxChanged(self, widget):
        if self.Block > 0:
            return

        text = widget.get_active_text()

        for shortDesc, plugin in self.DesktopPlugins.items():
            if text != shortDesc:
                self.EnablePlugin(plugin, False)
        
        self.Context.Write()

        for shortDesc, plugin in self.DesktopPlugins.items():
            if text == shortDesc:
                plugin.Enabled = True
                # exception for cube, since it requires rotate
                if plugin.Name == 'cube':
                    setting = self.Context.Plugins['core'].Screens[0]['vsize']
                    setting.Value = 1 # Cube can only use 1 vertical viewport
                    self.EnablePlugin(self.Context.Plugins['rotate'], True)

        self.Context.Write()
        self.SetDesktopSize()

    def FillAppearenceBox(self):
        box = self.GladeXML.get_widget("desktopPluginChooser")
        self.SetupBoxModel(box)

        i = 0
        for shortDesc, plugin in self.DesktopPlugins.items():
            box.append_text(shortDesc)
            if plugin.Enabled:
                box.set_active(i)
            i += 1

    def SetEffectRating(self):
        rating = 0.0

        for pluginName, points in EffectPluginRatings.items():
	    if not pluginName in self.Context.Plugins:
		continue
            plugin = self.Context.Plugins[pluginName]
            if plugin.Enabled:
                rating += points

        rating = (rating / 74.0) * 5

        self.EffectStars.set_value(rating)
    
    def SetAnimationRating(self):
        boxes = {
            'closeAnimationBox': 'close_effects',
            'openAnimationBox': 'open_effects',
            'minimizeAnimationBox': 'minimize_effects'
        }
        names = {
            'close_effects': CloseOpenEffectNames,
            'open_effects': CloseOpenEffectNames,
            'minimize_effects': MinimizeEffectNames
        }
        plugin = self.Context.Plugins['animation']
        
        rating = 0.0
        for box, settingName in boxes.items():
            box = self.GladeXML.get_widget(box)
            text = box.get_active_text()
            setting = plugin.Screens[0][settingName]
            value = setting.Value[0]
            name = names[settingName][value]
            rating += AnimationRatings[name]
        
        if not plugin.Enabled:
            rating = 0.0
        if self.Context.Plugins['fade'].Enabled:
            rating += AnimationRatings[_('Fade')] * 2
        if self.Context.Plugins['minimize'].Enabled:
            rating += AnimationRatings[_('Zoom')] / 3 
        
        rating = rating / (10 * len(boxes)) * 5
        
        self.AnimationStars.set_value(rating)

    def EnableAnimationsChanged(self, widget):
        if self.Block > 0:
            return

        plugin = self.Context.Plugins['animation']
        self.EnablePlugin(plugin, widget.get_active())

        self.SetAnimationRating()

    def SetEnableAnimations(self):
        plugin = self.Context.Plugins['animation']
        widget = self.GladeXML.get_widget("enableAnimations")
        widget.set_active(plugin.Enabled)
    
    def AnimationBoxChanged(self, widget, settingName):
        if self.Block > 0:
            return

        text = widget.get_active_text()
        plugin = self.Context.Plugins['animation']
        setting = plugin.Screens[0][settingName]
        value = setting.Value
        if len(value) >= 1:
            value[0] = setting.Info[1][2][text]
            setting.Value = value
            self.Context.Write()
        else:
            for setting in plugin.Groups[setting.Group][setting.SubGroup].Screens[0].values():
                setting.Reset()
            self.Context.Write()
            self.AnimationBoxChanged(widget, settingName)

        self.SetAnimationRating()
    
    def FillAnimationBoxes(self):
        plugin = self.Context.Plugins['animation']
        
        boxes = {}
        boxes['closeAnimationBox'] =  "close_effects"
        boxes['openAnimationBox'] = "open_effects"
        boxes['minimizeAnimationBox'] = "minimize_effects"

        for boxName, settingName in boxes.items():
            box = self.GladeXML.get_widget(boxName)
            setting = plugin.Screens[0][settingName]
            items = sorted(setting.Info[1][2].items(), ccm.EnumSettingSortCompare)
            self.SetupBoxModel(box)
            for key, value in items:
                box.append_text(key)
            if len(setting.Value):
                value = setting.Value[0]
                box.set_active(value)
            else:
                box.set_active(0)

    def EffectPluginChanged(self, widget, pluginName):
        if self.Block > 0:
            return

        plugin = self.Context.Plugins[pluginName]
        value  = widget.get_active()

        self.EnablePlugin(plugin, value)

    def SetEffectPlugins(self):
        plugins = {}
        plugins['scale'] = self.EnableScale
        plugins['wobbly'] = self.EnableWobbly
        plugins['blur'] = self.EnableBlur

        for pluginName, widget in plugins.items():
            plugin = self.Context.Plugins[pluginName]
            widget.set_active(plugin.Enabled)
 
    def SwitcherBoxChanged(self, widget):
        if self.Block > 0:
            return

        text = widget.get_active_text()

        for shortDesc, plugin in self.SwitcherPlugins.items():
            if text != shortDesc:
                self.EnablePlugin(plugin, False)

        self.Context.Write()

        for shortDesc, plugin in self.SwitcherPlugins.items():
            if text == shortDesc:
                plugin.Enabled = True
                # Exception for shift, since it has 2 modes
                if plugin.Name == 'shift':
                    setting = plugin.Screens[0]['mode']

                    if text.find(_("Cover")) != -1:
                        setting.Value = 0
                    elif text.find(_("Flip")) != -1:
                        setting.Value = 1

        self.Context.Write()

    def FillSwitcherBox(self):
        box = self.GladeXML.get_widget("switcherPluginChooser")
        self.SetupBoxModel(box)

        i = 0
        for shortDesc, plugin in self.SwitcherPlugins.items():
            box.append_text(shortDesc)
            if plugin.Enabled:
                if plugin.Name == 'shift':
                    modes = [_("Cover"), _("Flip")]
                    setting = plugin.Screens[0]['mode']
                    mode = modes[setting.Value]
                    if shortDesc.find(mode) != -1:
                        box.set_active(i)
                else:
                    box.set_active(i)
            i += 1

    def CheckAccessibility(self):
        rating = 0.0
        for name in AccessibilityPlugins.keys():
            if self.Context.Plugins.has_key(name) and self.Context.Plugins[name].Enabled:
                rating += AccessibilityPlugins[name]
        
        self.AccessibilityCheck.set_value(rating >= 2.0)
    
    def ZoomChanged(self, widget):
        if self.Block > 0:
            return
        
        plugin = None
        pluginNames = ["ezoom", "zoom"]
        for name in pluginNames:
            if self.Context.Plugins.has_key(name):
                plugin = self.Context.Plugins[name]
                break
        if not plugin:
            return
        
        plugin.Enabled = widget.get_active()
        self.Context.Write()

        self.CheckAccessibility()

    
    def SetZoom(self):
        pluginNames = ["ezoom", "zoom"]
            
        plugin = None
        for name in pluginNames:
             if self.Context.Plugins.has_key(name):
                plugin = self.Context.Plugins[name]
                break
        if not plugin:
            return

        if plugin.Name == "ezoom":
            if self.ZoomIn == None:
                self.ZoomIn = ccm.MakeSetting(plugin.Display['zoom_in'])
                self.ZoomBox.pack_start(self.ZoomIn.Widget, True, False)
            if self.ZoomOut == None:
                self.ZoomOut = ccm.MakeSetting(plugin.Display['zoom_out'])
                self.ZoomBox.pack_start(self.ZoomOut.Widget, True, False)

            self.ZoomIn.Read()
            self.ZoomOut.Read()

        self.EnableZoom.set_active(plugin.Enabled)

    def Quit(self, widget):
        gtk.main_quit()

if __name__ == "__main__":
    context = ccs.Context()
    page = -1
    parser = OptionParser()
    parser.add_option("-p", "--page", dest = "page",
		      help = "Directly jump to page PAGE", metavar = "PAGE")
    (options, args) = parser.parse_args()
    if options.page:
        page = options.page
    mainWin = MainWin(context, page)
    gtk.main()
